generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  phone     String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listings  Listing[]
  passkeys  Passkey[]
  passwordResetTokens PasswordResetToken[]
  
  // Inquiry relationships
  sentInquiries     Inquiry[] @relation("BuyerInquiries")
  receivedInquiries Inquiry[] @relation("SellerInquiries")

  @@map("users")
}

model Passkey {
  id                String   @id @default(cuid())
  userId            String
  credentialId      String   @unique
  credentialPublicKey Bytes
  counter           BigInt
  deviceType        String
  backedUp          Boolean
  transports        String[]
  name              String?  // User-friendly name like "iPhone Face ID"
  lastUsedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("passkeys")
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

model Listing {
  id             String        @id @default(cuid())
  title          String
  description    String
  price          Int
  images         String[]
  city           String?
  state          String?
  latitude       Float?
  longitude      Float?
  status         ListingStatus @default(PENDING)
  viewCount      Int           @default(0)
  sellerId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  seller         User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  inquiries      Inquiry[]

  // Indexes for performance
  @@index([status, createdAt(sort: Desc)])
  @@index([latitude, longitude])
  @@index([sellerId, createdAt(sort: Desc)])
  @@index([status])
  @@index([status, latitude, longitude, createdAt(sort: Desc)])  // For geospatial queries with status filter
  
  @@map("listings")
}

enum InquiryStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Inquiry {
  id          String        @id @default(cuid())
  
  // Core relationships
  buyerId     String
  buyer       User          @relation("BuyerInquiries", fields: [buyerId], references: [id], onDelete: Cascade)
  
  sellerId    String
  seller      User          @relation("SellerInquiries", fields: [sellerId], references: [id], onDelete: Cascade)
  
  listingId   String
  listing     Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  // Status
  status      InquiryStatus @default(PENDING)
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  respondedAt DateTime?     // When seller accepted/rejected
  
  // Prevent duplicate inquiries
  @@unique([buyerId, listingId])
  
  // Indexes for performance
  @@index([sellerId, status])
  @@index([buyerId, status])
  @@index([buyerId, createdAt(sort: Desc)])  // For buyer's inquiry list sorted by date
  @@index([sellerId, createdAt(sort: Desc)])  // For seller's inquiry list sorted by date
  @@index([listingId])
  
  @@map("inquiries")
}

model PendingUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Already hashed
  name      String
  phone     String?
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  passkeyData Json?  // Store passkey registration data temporarily
  
  @@index([expiresAt])
  @@map("pending_users")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

