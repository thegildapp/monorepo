name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thegildapp/monorepo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          build-args: |
            VITE_GRAPHQL_URL=https://api.thegild.app/graphql
            VITE_SPACES_ENDPOINT=https://gild.sfo3.digitaloceanspaces.com
            VITE_GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}

      - name: Create GitHub registry secret
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create database secret
        run: |
          kubectl create secret generic database-secret \
            --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create OpenSearch secret
        run: |
          kubectl create secret generic opensearch-secret \
            --from-literal=OPENSEARCH_CONNECTION_STRING="${{ secrets.OPENSEARCH_CONNECTION_STRING }}" \
            --from-literal=OPENSEARCH_USERNAME="${{ secrets.OPENSEARCH_USERNAME }}" \
            --from-literal=OPENSEARCH_PASSWORD="${{ secrets.OPENSEARCH_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Spaces secret
        run: |
          kubectl create secret generic spaces-secret \
            --from-literal=SPACES_ACCESS_KEY="${{ secrets.SPACES_ACCESS_KEY }}" \
            --from-literal=SPACES_SECRET_KEY="${{ secrets.SPACES_SECRET_KEY }}" \
            --from-literal=SPACES_BUCKET="${{ secrets.SPACES_BUCKET }}" \
            --from-literal=SPACES_ENDPOINT="${{ secrets.SPACES_ENDPOINT }}" \
            --from-literal=SPACES_REGION="${{ secrets.SPACES_REGION }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create OpenAI secret
        run: |
          kubectl create secret generic openai-secret \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Valkey secret
        run: |
          kubectl create secret generic valkey-secret \
            --from-literal=VALKEY_URL="${{ secrets.VALKEY_URL }}" \
            --from-literal=VALKEY_HOST="${{ secrets.VALKEY_HOST }}" \
            --from-literal=VALKEY_PORT="${{ secrets.VALKEY_PORT }}" \
            --from-literal=VALKEY_PASSWORD="${{ secrets.VALKEY_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create SendGrid secret
        run: |
          kubectl create secret generic sendgrid-secret \
            --from-literal=SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          # Apply nginx configurations
          kubectl apply -f k8s/nginx-configmap.yaml
          kubectl apply -f k8s/ingress-nginx-service.yaml
          
          # Apply ingress and cert configurations
          kubectl apply -f k8s/letsencrypt-issuer.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Apply deployments
          kubectl apply -f k8s/backend-deployment.prod.yaml
          kubectl apply -f k8s/frontend-deployment.prod.yaml

          # Update image tags
          kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/backend
          kubectl rollout status deployment/frontend

      - name: Verify deployment
        run: |
          kubectl get pods
          echo "ðŸŽ‰ Deployment successful!"
          echo "Frontend: https://thegild.app"
          echo "Backend: https://api.thegild.app/graphql"
