
type User {
  id: ID!
  email: String!
  name: String!
  phone: String
  avatarUrl: String
  createdAt: String!
  updatedAt: String!
  passkeys: [Passkey!]!
}

type Passkey {
  id: ID!
  name: String
  createdAt: String!
  lastUsedAt: String
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

type ImageVariants {
  thumbnail: String!
  card: String!
  full: String!
}

type Listing {
  id: ID!
  title: String!
  description: String!
  price: Int!
  images: [String!]!
  imageVariants: [ImageVariants!]
  city: String
  state: String
  latitude: Float
  longitude: Float
  status: ListingStatus!
  seller: User!
  createdAt: String!
  updatedAt: String!
}

type Query {
  listings(limit: Int, offset: Int, filters: LocationFilter): [Listing!]!
  listing(id: ID!): Listing
  searchListings(query: String!, limit: Int, offset: Int, filters: SearchFilters): [Listing!]!
  user(id: ID!): User
  me: User
  myListings: [Listing!]!
}

input LocationFilter {
  latitude: Float
  longitude: Float
  radius: Float
}

input SearchFilters {
  priceMin: Int
  priceMax: Int
  location: String
  yearMin: Int
  yearMax: Int
  make: String
  model: String
  latitude: Float
  longitude: Float
  radius: Float
}

type UploadUrl {
  url: String!
  key: String!
}

type Mutation {
  createListing(input: CreateListingInput!): Listing!
  updateListing(id: ID!, input: UpdateListingInput!): Listing!
  deleteListing(id: ID!): Boolean!
  generateUploadUrl(filename: String!, contentType: String!): UploadUrl!
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  refreshToken: AuthPayload!
  updateProfile(input: UpdateProfileInput!): User!
  
  # Passkey operations
  createPasskeyRegistrationOptions: PasskeyRegistrationOptions!
  verifyPasskeyRegistration(input: VerifyPasskeyRegistrationInput!): Passkey!
  createPasskeyAuthenticationOptions(email: String!): PasskeyAuthenticationOptions!
  verifyPasskeyAuthentication(input: VerifyPasskeyAuthenticationInput!): AuthPayload!
  deletePasskey(id: ID!): Boolean!
  
  # Passkey-first auth
  startPasskeyRegistration(email: String!, name: String!): PasskeyRegistrationOptions!
  completePasskeyRegistration(input: CompletePasskeyRegistrationInput!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

input RegisterInput {
  email: String!
  password: String!
  name: String!
  phone: String
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateProfileInput {
  name: String
  phone: String
  avatarUrl: String
}

type PasskeyRegistrationOptions {
  publicKey: String!
}

type PasskeyAuthenticationOptions {
  publicKey: String!
}

input VerifyPasskeyRegistrationInput {
  response: String!
  name: String
}

input VerifyPasskeyAuthenticationInput {
  email: String!
  response: String!
}

input CompletePasskeyRegistrationInput {
  email: String!
  name: String!
  response: String!
  passkeyName: String
}

input ImageVariantsInput {
  thumbnail: String!
  card: String!
  full: String!
}

input CreateListingInput {
  title: String!
  description: String!
  price: Int!
  images: [String!]!
  city: String!
  state: String!
  latitude: Float
  longitude: Float
}

input UpdateListingInput {
  title: String
  description: String
  price: Int
  images: [String!]
  imageVariants: [ImageVariantsInput!]
  city: String
  state: String
  latitude: Float
  longitude: Float
}

