
type User {
  id: ID!
  email: String!
  name: String!
  phone: String
  avatarUrl: String
  createdAt: String!
  updatedAt: String!
  passkeys: [Passkey!]!
}

type Passkey {
  id: ID!
  name: String
  createdAt: String!
  lastUsedAt: String
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

type Listing {
  id: ID!
  title: String!
  description: String!
  price: Int!
  images: [String!]!
  city: String
  state: String
  latitude: Float
  longitude: Float
  status: ListingStatus!
  seller: User!
  createdAt: String!
  updatedAt: String!
  
  # Inquiry-related fields
  hasInquired: Boolean!
  pendingInquiriesCount: Int
  inquiries: [Inquiry!]
  
  # View tracking
  viewCount: Int!
}

type Query {
  listings(limit: Int, offset: Int, filters: LocationFilter): [Listing!]!
  listing(id: ID!): Listing
  searchListings(query: String!, limit: Int, offset: Int, filters: SearchFilters): [Listing!]!
  user(id: ID!): User
  me: User
  myListings: [Listing!]!
  
  # Payment methods
  myPaymentMethods: [PaymentMethod!]!
  
  # Inquiry queries
  inquiry(id: ID!): Inquiry
  myInquiries(type: InquiryType!, status: InquiryStatus, limit: Int, offset: Int): InquiryConnection!
  myInquiryStats: InquiryStats!
}

enum InquiryType {
  SENT
  RECEIVED
}

input LocationFilter {
  latitude: Float
  longitude: Float
  radius: Float
}

input SearchFilters {
  priceMin: Int
  priceMax: Int
  location: String
  yearMin: Int
  yearMax: Int
  make: String
  model: String
  latitude: Float
  longitude: Float
  radius: Float
}

type UploadUrl {
  url: String!
  key: String!
}

type SetupIntent {
  clientSecret: String!
  ephemeralKey: String
  customerId: String!
}

type PaymentMethod {
  id: String!
  brand: String!
  last4: String!
  expMonth: Int!
  expYear: Int!
  isDefault: Boolean!
}

type Mutation {
  createListing(input: CreateListingInput!): Listing!
  updateListing(id: ID!, input: UpdateListingInput!): Listing!
  deleteListing(id: ID!): Boolean!
  generateUploadUrl(filename: String!, contentType: String!, fileSize: Int): UploadUrl!
  generateAvatarUploadUrl(filename: String!, contentType: String!, fileSize: Int): UploadUrl!
  createSetupIntent: SetupIntent!
  register(input: RegisterInput!): AuthPayload
  login(input: LoginInput!): AuthPayload
  refreshToken: AuthPayload!
  updateProfile(input: UpdateProfileInput!): User!
  
  # Passkey operations
  createPasskeyRegistrationOptions: AuthPayload
  verifyPasskeyRegistration(input: VerifyPasskeyRegistrationInput!): Passkey!
  createPasskeyAuthenticationOptions(email: String!): AuthPayload
  verifyPasskeyAuthentication(input: VerifyPasskeyAuthenticationInput!): AuthPayload
  deletePasskey(id: ID!): Boolean!
  
  # Passkey-first auth
  startPasskeyRegistration(email: String!, name: String!): AuthPayload
  completePasskeyRegistration(input: CompletePasskeyRegistrationInput!): AuthPayload
  
  # Inquiry mutations
  requestContact(listingId: ID!): RequestContactPayload!
  acceptContactRequest(inquiryId: ID!): AcceptContactPayload!
  rejectContactRequest(inquiryId: ID!): RejectContactPayload!
  respondToInquiry(inquiryId: ID!, accept: Boolean!): RespondToInquiryPayload!
  
  # View tracking
  trackListingView(listingId: ID!): TrackViewPayload!
  
  # Payment methods
  savePaymentMethod(paymentMethodId: String!): PaymentMethod!
  setDefaultPaymentMethod(paymentMethodId: String!): PaymentMethod!
  deletePaymentMethod(paymentMethodId: String!): Boolean!
  
  # Password reset
  requestPasswordReset(email: String!): PasswordResetRequestPayload!
  resetPassword(token: String!, newPassword: String!): PasswordResetPayload!
  validatePasswordResetToken(token: String!): PasswordResetTokenValidation!
  createPasskeyWithResetToken(resetToken: String!): PasskeyResetPayload!
  verifyPasskeyWithResetToken(resetToken: String!, response: String!, name: String): PasswordResetPayload!
  
  # Email verification
  verifyEmail(token: String!): AuthPayload
  resendVerificationEmail(email: String!): Boolean!
}

type TrackViewPayload {
  success: Boolean!
  viewCount: Int!
}

type AuthPayload {
  token: String
  user: User
  errors: [FieldError!]
  publicKey: String  # For passkey operations
}

input RegisterInput {
  email: String!
  password: String!
  name: String!
  phone: String
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateProfileInput {
  name: String
  phone: String
  avatarUrl: String
}


input VerifyPasskeyRegistrationInput {
  response: String!
  name: String
}

input VerifyPasskeyAuthenticationInput {
  email: String!
  response: String!
}

input CompletePasskeyRegistrationInput {
  email: String!
  name: String!
  response: String!
  passkeyName: String
}

input CreateListingInput {
  title: String!
  description: String!
  price: Int!
  images: [String!]!
  city: String!
  state: String!
  latitude: Float
  longitude: Float
  paymentMethodId: String!
}

input UpdateListingInput {
  title: String
  description: String
  price: Int
  images: [String!]
  city: String
  state: String
  latitude: Float
  longitude: Float
}

# Inquiry System Types
enum InquiryStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Inquiry {
  id: ID!
  buyer: User!
  seller: User!
  listing: Listing!
  status: InquiryStatus!
  
  # Contact info (only visible when status is ACCEPTED)
  contactPhone: String
  
  createdAt: String!
  updatedAt: String!
  respondedAt: String
}

type InquiryConnection {
  inquiries: [Inquiry!]!
  totalCount: Int!
  hasMore: Boolean!
}

type InquiryStats {
  totalReceived: Int!
  pendingCount: Int!
  acceptedCount: Int!
  rejectedCount: Int!
}

# Inquiry Payloads
type RequestContactPayload {
  inquiry: Inquiry
  errors: [FieldError!]
}

type AcceptContactPayload {
  inquiry: Inquiry
  errors: [FieldError!]
}

type RejectContactPayload {
  inquiry: Inquiry
  errors: [FieldError!]
}

type RespondToInquiryPayload {
  inquiry: Inquiry
  errors: [FieldError!]
}

type FieldError {
  field: String
  message: String!
  code: String
}

# Password Reset Payloads
type PasswordResetRequestPayload {
  success: Boolean!
  message: String!
  errors: [FieldError!]
}

type PasswordResetPayload {
  user: User
  token: String
  errors: [FieldError!]
}

type PasswordResetTokenValidation {
  valid: Boolean!
  user: User
  errors: [FieldError!]
}

type PasskeyResetPayload {
  publicKey: String
  user: User
  errors: [FieldError!]
}

